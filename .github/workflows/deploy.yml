name: Deployment Pipeline

on:
  workflow_run:
    workflows: ["Release Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # デプロイメント準備
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set environment
      id: env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=production" >> $GITHUB_OUTPUT
        fi
        
    - name: Set version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # 最新のリリースタグを取得
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate deployment
      run: |
        echo "🚀 Preparing deployment:"
        echo "  Environment: ${{ steps.env.outputs.environment }}"
        echo "  Version: ${{ steps.version.outputs.version }}"
        echo "  Registry: ${{ env.DOCKER_REGISTRY }}"
        echo "  Images: ${{ env.IMAGE_NAME }}"

  # ステージング環境デプロイ
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: ${{ needs.prepare-deployment.outputs.environment == 'staging' || needs.prepare-deployment.outputs.environment == 'production' }}
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create staging environment
      run: |
        # ステージング用のdocker-composeファイルを作成
        cp docker-compose.yml docker-compose.staging.yml
        
        # ステージング用の設定を適用
        VERSION="${{ needs.prepare-deployment.outputs.version }}"
        sed -i "s/prism-api:latest/${{ env.DOCKER_REGISTRY }}\/${{ env.IMAGE_NAME }}-api:$VERSION/g" docker-compose.staging.yml
        sed -i "s/prism-web:latest/${{ env.DOCKER_REGISTRY }}\/${{ env.IMAGE_NAME }}-web:$VERSION/g" docker-compose.staging.yml
        sed -i "s/prism-worker:latest/${{ env.DOCKER_REGISTRY }}\/${{ env.IMAGE_NAME }}-worker:$VERSION/g" docker-compose.staging.yml
        sed -i "s/prism-mcp:latest/${{ env.DOCKER_REGISTRY }}\/${{ env.IMAGE_NAME }}-mcp:$VERSION/g" docker-compose.staging.yml
        
        # ステージング用のポート設定
        sed -i 's/8060:8000/8062:8000/g' docker-compose.staging.yml
        sed -i 's/8061:80/8063:80/g' docker-compose.staging.yml
        
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        docker-compose -f docker-compose.staging.yml down
        docker-compose -f docker-compose.staging.yml pull
        docker-compose -f docker-compose.staging.yml up -d
        
    - name: Wait for services
      run: |
        echo "⏳ Waiting for services to start..."
        sleep 30
        docker-compose -f docker-compose.staging.yml ps
        
    - name: Health check staging
      run: |
        echo "🔍 Performing health checks..."
        # API ヘルスチェック
        curl -f http://localhost:8062/healthz || exit 1
        # Web ヘルスチェック
        curl -f http://localhost:8063/ || exit 1
        echo "✅ Staging deployment successful!"
        
    - name: Run staging tests
      run: |
        echo "🧪 Running staging tests..."
        # 基本的なAPIテスト
        curl -f -H "Authorization: Bearer test-api-key" http://localhost:8062/healthz/detailed || exit 1
        curl -f http://localhost:8062/metrics || exit 1
        echo "✅ Staging tests passed!"

  # 本番環境デプロイ
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-staging]
    if: ${{ needs.prepare-deployment.outputs.environment == 'production' }}
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create production environment
      run: |
        # 本番用のdocker-composeファイルを作成
        cp docker-compose.yml docker-compose.production.yml
        
        # 本番用の設定を適用
        VERSION="${{ needs.prepare-deployment.outputs.version }}"
        sed -i "s/prism-api:latest/${{ env.DOCKER_REGISTRY }}\/${{ env.IMAGE_NAME }}-api:$VERSION/g" docker-compose.production.yml
        sed -i "s/prism-web:latest/${{ env.DOCKER_REGISTRY }}\/${{ env.IMAGE_NAME }}-web:$VERSION/g" docker-compose.production.yml
        sed -i "s/prism-worker:latest/${{ env.DOCKER_REGISTRY }}\/${{ env.IMAGE_NAME }}-worker:$VERSION/g" docker-compose.production.yml
        sed -i "s/prism-mcp:latest/${{ env.DOCKER_REGISTRY }}\/${{ env.IMAGE_NAME }}-mcp:$VERSION/g" docker-compose.production.yml
        
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        docker-compose -f docker-compose.production.yml down
        docker-compose -f docker-compose.production.yml pull
        docker-compose -f docker-compose.production.yml up -d
        
    - name: Wait for services
      run: |
        echo "⏳ Waiting for services to start..."
        sleep 30
        docker-compose -f docker-compose.production.yml ps
        
    - name: Health check production
      run: |
        echo "🔍 Performing health checks..."
        # API ヘルスチェック
        curl -f http://localhost:8060/healthz || exit 1
        # Web ヘルスチェック
        curl -f http://localhost:8061/ || exit 1
        echo "✅ Production deployment successful!"
        
    - name: Run production tests
      run: |
        echo "🧪 Running production tests..."
        # 基本的なAPIテスト
        curl -f -H "Authorization: Bearer test-api-key" http://localhost:8060/healthz/detailed || exit 1
        curl -f http://localhost:8060/metrics || exit 1
        echo "✅ Production tests passed!"

  # ロールバック機能
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    environment: ${{ needs.prepare-deployment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Rollback deployment
      run: |
        echo "🔄 Rolling back deployment..."
        ENV="${{ needs.prepare-deployment.outputs.environment }}"
        if [ "$ENV" = "staging" ]; then
          docker-compose -f docker-compose.staging.yml down
          # 前のバージョンにロールバック
          docker-compose -f docker-compose.staging.yml up -d
        elif [ "$ENV" = "production" ]; then
          docker-compose -f docker-compose.production.yml down
          # 前のバージョンにロールバック
          docker-compose -f docker-compose.production.yml up -d
        fi
        echo "✅ Rollback completed"

  # デプロイメント通知
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' }}
      run: |
        echo "🎉 Deployment to ${{ needs.prepare-deployment.outputs.environment }} successful!"
        echo "📦 Version: ${{ needs.prepare-deployment.outputs.version }}"
        echo "🌐 Environment: ${{ needs.prepare-deployment.outputs.environment }}"
        echo "✅ All services are running"
        
    - name: Notify failure
      if: ${{ needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' }}
      run: |
        echo "❌ Deployment to ${{ needs.prepare-deployment.outputs.environment }} failed!"
        echo "📦 Version: ${{ needs.prepare-deployment.outputs.version }}"
        echo "🌐 Environment: ${{ needs.prepare-deployment.outputs.environment }}"
        echo "🔄 Rollback may be required"
        exit 1
